You are given a circular array arr[] of integers, find the maximum possible sum of a non-empty subarray. In a circular array, the subarray can start at the end and wrap around to the beginning. Return the maximum non-empty subarray sum, considering both non-wrapping and wrapping cases.

Examples:

Input: arr[] = [8, -8, 9, -9, 10, -11, 12]
Output: 22
Explanation: Starting from the last element of the array, i.e, 12, and moving in a circular fashion, we have max subarray as 12, 8, -8, 9, -9, 10, which gives maximum sum as 22.
--------------
class Solution {
  public:
    int maxCircularSum(vector<int> &arr) {
        // code here
        int maxSum=arr[0],curMax=0,curMin=0,minSum=arr[0],total=0;
       for (int num : arr) {
        curMax = max(num, curMax + num);
        maxSum = max(maxSum, curMax);

        curMin = min(num, curMin + num);
        minSum = min(minSum, curMin);

        total += num;
    }
    if(maxSum<0) return maxSum;
        return max(maxSum,total-minSum);
    }
};
