You are given a circular array arr[] of integers, find the maximum possible sum of a non-empty subarray. In a circular array, the subarray can start at the end and wrap around to the beginning. Return the maximum non-empty subarray sum, considering both non-wrapping and wrapping cases.

Examples:

Input: arr[] = [8, -8, 9, -9, 10, -11, 12]
Output: 22
Explanation: Starting from the last element of the array, i.e, 12, and moving in a circular fashion, we have max subarray as 12, 8, -8, 9, -9, 10, which gives maximum sum as 22.
--------------
class Solution {
  public:
    int maxCircularSum(vector<int> &arr) {
        // code here
        int maxSum=arr[0],curMax=0,curMin=0,minSum=arr[0],total=0;
       for (int num : arr) {
        curMax = max(num, curMax + num);
        maxSum = max(maxSum, curMax);

        curMin = min(num, curMin + num);
        minSum = min(minSum, curMin);

        total += num;
    }
    if(maxSum<0) return maxSum;
        return max(maxSum,total-minSum);
    }
};

-------------
Explanation:
-------------
- 💡 The function finds the maximum subarray sum in a circular array where elements wrap around.
- 📈 Uses Kadane’s Algorithm to compute maxSum, the largest sum of a subarray (standard non-circular case).
- 📉 Simultaneously calculates minSum, the smallest subarray sum to help detect circular wrapping.
- 🔄 Adds up total, the sum of all array elements, needed for circular case logic.
- 🌀 Computes circular max as total - minSum, which represents removing the minimum (worst) part to maximize what wraps around.
- ⚠️ If all elements are negative, total - minSum falsely becomes 0, so the check if (maxSum < 0) ensures the algorithm returns the true max single element.
- ✅ Final return is either maxSum or total - minSum, whichever is higher — unless maxSum is negative, in which case only maxSum is correct.
If you'd like, I 
--------------
